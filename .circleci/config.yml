# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: cica-repo-dev
    docker:
      # Image tool container
      - image: 754256621582.dkr.ecr.eu-west-2.amazonaws.com/cloud-platform/tools:circleci
      # - image: ${ECR_REPOSITORY}/${ECR_REPO_NAME}:image-tools-circleci
jobs:
  build:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build docker image
          command: |
            docker build --no-cache -t cica/cica-repo-dev .
      - run:
          name: Archive Docker Image
          command: |
            docker save -o image.tar cica/cica-repo-dev:latest
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  publish_latest:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      #      - run:
      #          name: Install test tools
      #          command: curl -fsSL https://goss.rocks/install | sh
      - run:
          name: Test the container
          command: |
            docker run -d -p 3001:3001 --restart=always --name cica-repo-dev cica/cica-repo-dev:latest
            docker ps
            docker stop cica-repo-dev
            docker ps
  push_image:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Authenticate and push image to ecr
          command: |
            echo "run aws"
            $(aws ecr get-login --region eu-west-2 --no-include-email)

            docker tag cica/cica-repo-dev:latest ${ECR_REPOSITORY}/cica/cica-repo-dev:${CIRCLE_SHA1}
            docker push ${ECR_REPOSITORY}/cica/cica-repo-dev:${CIRCLE_SHA1}

            if [ "${CIRCLE_BRANCH}" ==  "dcs-deploy" ]; then
               docker tag cica/cica-repo-dev:latest ${ECR_REPOSITORY}/cica/cica-repo-dev:${CIRCLE_SHA1}
               docker push ${ECR_REPOSITORY}/cica/cica-repo-dev:${CIRCLE_SHA1}
            fi
  deploy_to_dev:
    executor: docker-publisher
    steps:
      - checkout
      - run:
          name: Kubectl deployment
          command: |
            setup-kube-auth
            kubectl config use-context dev
      - setup_remote_docker
      - deploy:
          name: Deploy to the cluster
          command: |
            echo "deploy before aws ecr"
            kubectl set image -f kube_deploy/Dev/deploy.yml data-capture-service=${ECR_REPOSITORY}/cica/cica-repo-dev:${CIRCLE_SHA1} --local -o yaml \
            | kubectl apply -f -
            kubectl apply \
                -f kube_deploy/Dev/service.yml \
                -f kube_deploy/Dev/ingress.yml
  deploy_to_uat:
    executor: docker-publisher
    steps:
      - checkout
      - run:
          name: Kubectl deployment
          command: |
            setup-kube-auth
            kubectl config use-context uat
      - setup_remote_docker
      - deploy:
          name: Deploy to the cluster
          command: |
            echo "deploy before aws ecr"
            kubectl set image -f kube_deploy/Uat/deploy.yml data-capture-service=${ECR_REPOSITORY}/cica/cica-repo-dev:${CIRCLE_SHA1} --local -o yaml \
            | kubectl apply -f -
            kubectl apply \
                -f kube_deploy/Uat/service.yml \
                -f kube_deploy/Uat/ingress.yml
  deploy_to_prod:
    executor: docker-publisher
    steps:
      - checkout
      - run:
          name: Kubectl deployment
          command: |
            setup-kube-auth
            kubectl config use-context production
      - setup_remote_docker
      - deploy:
          name: Deploy to the cluster
          command: |
            echo "deploy before aws ecr"
            kubectl set image -f kube_deploy/Production/deploy.yml data-capture-service=${ECR_REPOSITORY}/cica/cica-repo-dev:${CIRCLE_SHA1} --local -o yaml \
            | kubectl apply -f -
            kubectl apply \
                -f kube_deploy/Production/service.yml \
                -f kube_deploy/Production/ingress.yml
workflows:
  version: 2
  build-test-push-deploydev-deploytouatapproval-deployuat-deploytoprodapproval-deployprod:
    jobs:
      - build
      - publish_latest:
          requires:
            - build
      - push_image:
          requires:
            - publish_latest
          filters:
            branches:
              only: dcs-deploy
      - deploy_to_dev:
          requires:
            - push_image
          filters:
            branches:
              only: dcs-deploy
      - deploy_to_uat_approval:
          type: approval
          requires:
            - push_image
            - deploy_to_dev
      - deploy_to_uat:
          #          type: approval
          requires:
            - push_image
            - deploy_to_uat_approval
          filters:
            branches:
              only: dcs-deploy
      - deploy_to_prod_approval:
          type: approval
          requires:
            - push_image
            - deploy_to_uat
          filters:
            branches:
              only: dcs-deploy
      - deploy_to_prod:
          requires:
            - deploy_to_prod_approval
          filters:
            branches:
              only: dcs-deploy
